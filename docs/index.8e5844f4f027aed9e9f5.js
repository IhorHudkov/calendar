(()=>{"use strict";class e{constructor(e){this._name=e,this._role="user"}get name(){return this._name}get role(){return this._role}}class t extends e{constructor(e){super(e),this._role="admin"}}const n=["Jhon","Mila","Sam","Molly","Garry","Lisa","Mike"],o=[];for(let a=0;a<n.length;a+=1)a<3?o.push(new t(n[a])):o.push(new e(n[a]));const a=o,r=My$.modal({content:`\n    <p>Please, authorise</p>\n    <p id="role"></p>\n    <select class="form-select form-select-lg mb-3" id="auth-select">\n        <option selected>Select a name</option>\n        ${(()=>{let e="";for(const t of a)e+=`<option value="${t.name}">${t.name}</option>\n\t`;return e})()}\n    </select>\n    <div class="modal-buttons">\n        <button type="button" class="btn btn-primary" id="confirm">Confirm</button>\n    </div>\n  `});class s{constructor(e){this._event=e}_postOptions(){return{method:"POST",headers:{"Content-Type":"application/json;charset=utf-8"},body:`{"data": "${JSON.stringify(this._event).replace(/"/g,'\\"')}"}`}}static async getAllEvents(){const e=await fetch("http://158.101.166.74:8080/api/data/ihor_hudkov/events");return await e.json()}static async getEventByDayTime(e){return s.getAllEvents().then((t=>{let n;for(const o of t)if(JSON.parse(o.data).dayTime===e){n=o;break}return n}))}async createEvent(){const e=await s.getAllEvents();if(e)for(const t of e)if(JSON.parse(t.data).dayTime===this._event.dayTime)throw new Error("Failed to create an event. Time slot is already booked.");const t=await fetch("http://158.101.166.74:8080/api/data/ihor_hudkov/events",this._postOptions());return await t.json()}static async deleteEvent(e){return(await fetch(`http://158.101.166.74:8080/api/data/ihor_hudkov/events/${e}`,{method:"DELETE"})).ok}static async updateEvent(e,t){return(await fetch(`http://158.101.166.74:8080/api/data/ihor_hudkov/events/${e}`,{method:"PUT",headers:{"Content-Type":"application/json;charset=utf-8"},body:`{"data": "${JSON.stringify(t).replace(/"/g,'\\"')}"}`})).ok}}const c=document.getElementById("checkBoxes"),i=document.querySelectorAll("td"),d=My$.modal({content:'\n    <p>Are You sure You want to delete "Retrospective" event?</p>\n    <div class="modal-buttons">\n      <button type="button" class="btn btn-danger" id="yes">Yes</button>\n      <button type="button" class="btn btn-outline-dark" id="no">No!</button>\n    </div>\n  '});window.addEventListener("load",(()=>{function e(e){const{currentTarget:t}=e,{target:n}=e;d.open();const o=document.querySelector("#yes"),a=document.querySelector("#no"),r=()=>{d.close(),o.removeEventListener("click",c),a.removeEventListener("click",r)},c=()=>{const e=t.parentNode.getAttribute("id");s.deleteEvent(e).then((t=>{t?(n.parentNode.remove(),d.close(),console.log(e),alert("Event successfully deleted!")):(d.close(),alert("Something went wrong!")),o.removeEventListener("click",c),a.removeEventListener("click",r)}),(e=>{d.close(),alert(e.message),o.removeEventListener("click",c),a.removeEventListener("click",r)}))};o.addEventListener("click",c),a.addEventListener("click",r)}function t(t){const n=[];document.querySelectorAll('input[type="checkbox"]:checked').forEach((e=>{const t=document.querySelector(`label[for="${e.id}"`);n.push(t.textContent.trim())})),s.getAllEvents().then((o=>{o&&o.forEach((o=>{const{participants:a}=o;if("all"===t||My$.arrCompare(a,n)){const t=`td[headers="${JSON.parse(o.data).dayTime}"]`,n=document.querySelector(t),a=document.createElement("div"),r=document.createElement("span"),s=document.createElement("span");a.setAttribute("id",o.id),a.setAttribute("draggable","true"),s.innerHTML="&times;",r.textContent=JSON.parse(o.data).name,n.appendChild(a),a.appendChild(r),a.appendChild(s),a.classList.add("td-content"),s.classList.add("td__delete-btn"),s.addEventListener("click",e)}}))}))}function n(e){e.preventDefault()}function o(e){e.dataTransfer.setData("headers",e.currentTarget.getAttribute("headers"))}function l(e){const t=e.dataTransfer.getData("headers");e.target.appendChild(document.querySelector(`td[headers="${t}"]`).firstChild),s.getEventByDayTime(t).then((t=>{const n=e.target.getAttribute("headers");return{desiredEvent:t,newData:{name:JSON.parse(t.data).name,participants:JSON.parse(t.data).participants,dayTime:n}}})).then((e=>{s.updateEvent(e.desiredEvent.id,e.newData).then((e=>{e?alert("Successfully updated!"):alert("Something went wrong :(")}),(t=>{console.log(e.desiredEvent.id),console.log(e.newData),alert(`${t.message}`)}))}))}t("all"),c.addEventListener("closebox",(()=>{i.forEach((e=>{e.firstChild&&e.firstChild.remove()})),t()}),!1),i.forEach((e=>{e.addEventListener("dragover",n),e.addEventListener("dragstart",o),e.addEventListener("drop",l)})),r.open();const u=document.querySelector("#auth-select"),m=()=>{const e=document.querySelector("#auth-select>option:checked").value;let t;return"Select a name"!==e&&(t=a.find((t=>t.name===e&&t))),t};u.onchange=()=>{document.getElementById("role").innerText=`Role: ${m()?m().role:""}`};document.querySelector("#confirm").onclick=()=>{let e;if(m()&&(e=m().role,r.close()),"user"===e){document.querySelector("#new-event-btn").style.display="none",document.querySelector(".select-names").style.marginRight=0,i.forEach((e=>{e.removeEventListener("dragover",n),e.removeEventListener("dragstart",o),e.removeEventListener("drop",l)}));const e=document.querySelectorAll(".td__delete-btn");console.log(e);for(const t of e)t.style.display="none"}}}))})();